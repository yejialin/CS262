Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> js
Rule 1     js -> element js
Rule 2     js -> <empty>
Rule 3     element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
Rule 4     element -> stmt SEMICOLON
Rule 5     optparams -> params
Rule 6     optparams -> <empty>
Rule 7     params -> IDENTIFIER COMMA params
Rule 8     params -> IDENTIFIER
Rule 9     compoundstmt -> LBRACE stmts RBRACE
Rule 10    stmts -> stmt SEMICOLON stmts
Rule 11    stmts -> <empty>
Rule 12    stmt -> IF exp compoundstmt
Rule 13    stmt -> IF exp compoundstmt ELSE compoundstmt
Rule 14    stmt -> IDENTIFIER EQUAL exp
Rule 15    stmt -> RETURN exp
Rule 16    stmt -> VAR IDENTIFIER EQUAL exp
Rule 17    stmt -> exp
Rule 18    exp -> IDENTIFIER
Rule 19    exp -> NUMBER
Rule 20    exp -> STRING
Rule 21    exp -> TRUE
Rule 22    exp -> FALSE
Rule 23    exp -> NOT exp
Rule 24    exp -> LPAREN exp RPAREN
Rule 25    exp -> exp PLUS exp
Rule 26    exp -> exp MINUS exp
Rule 27    exp -> exp TIMES exp
Rule 28    exp -> exp DIVIDE exp
Rule 29    exp -> exp EQUALEQUAL exp
Rule 30    exp -> exp LE exp
Rule 31    exp -> exp LT exp
Rule 32    exp -> exp GE exp
Rule 33    exp -> exp GT exp
Rule 34    exp -> exp ANDAND exp
Rule 35    exp -> exp OROR exp
Rule 36    exp -> IDENTIFIER LPAREN optargs RPAREN
Rule 37    optargs -> args
Rule 38    optargs -> <empty>
Rule 39    args -> exp COMMA args
Rule 40    args -> exp

Terminals, with rules where they appear

ANDAND               : 34
COMMA                : 7 39
DIVIDE               : 28
ELSE                 : 13
EQUAL                : 14 16
EQUALEQUAL           : 29
FALSE                : 22
FUNCTION             : 3
GE                   : 32
GT                   : 33
IDENTIFIER           : 3 7 8 14 16 18 36
IF                   : 12 13
LBRACE               : 9
LE                   : 30
LPAREN               : 3 24 36
LT                   : 31
MINUS                : 26
NOT                  : 23
NUMBER               : 19
OROR                 : 35
PLUS                 : 25
RBRACE               : 9
RETURN               : 15
RPAREN               : 3 24 36
SEMICOLON            : 4 10
STRING               : 20
TIMES                : 27
TRUE                 : 21
VAR                  : 16
error                : 

Nonterminals, with rules where they appear

args                 : 37 39
compoundstmt         : 3 12 13 13
element              : 1
exp                  : 12 13 14 15 16 17 23 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 39 40
js                   : 1 0
optargs              : 36
optparams            : 3
params               : 5 7
stmt                 : 4 10
stmts                : 9 10

Parsing method: LALR

state 0

    (0) S' -> . js
    (1) js -> . element js
    (2) js -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . stmt SEMICOLON
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    $end            reduce using rule 2 (js -> .)
    FUNCTION        shift and go to state 5
    IF              shift and go to state 2
    IDENTIFIER      shift and go to state 3
    RETURN          shift and go to state 8
    VAR             shift and go to state 11
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    stmt                           shift and go to state 1
    element                        shift and go to state 9
    js                             shift and go to state 10
    exp                            shift and go to state 14

state 1

    (4) element -> stmt . SEMICOLON

    SEMICOLON       shift and go to state 16


state 2

    (12) stmt -> IF . exp compoundstmt
    (13) stmt -> IF . exp compoundstmt ELSE compoundstmt
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 18

state 3

    (14) stmt -> IDENTIFIER . EQUAL exp
    (18) exp -> IDENTIFIER .
    (36) exp -> IDENTIFIER . LPAREN optargs RPAREN

    EQUAL           shift and go to state 19
    PLUS            reduce using rule 18 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 18 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 18 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 18 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 18 (exp -> IDENTIFIER .)
    LE              reduce using rule 18 (exp -> IDENTIFIER .)
    LT              reduce using rule 18 (exp -> IDENTIFIER .)
    GE              reduce using rule 18 (exp -> IDENTIFIER .)
    GT              reduce using rule 18 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 18 (exp -> IDENTIFIER .)
    OROR            reduce using rule 18 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 20


state 4

    (21) exp -> TRUE .

    PLUS            reduce using rule 21 (exp -> TRUE .)
    MINUS           reduce using rule 21 (exp -> TRUE .)
    TIMES           reduce using rule 21 (exp -> TRUE .)
    DIVIDE          reduce using rule 21 (exp -> TRUE .)
    EQUALEQUAL      reduce using rule 21 (exp -> TRUE .)
    LE              reduce using rule 21 (exp -> TRUE .)
    LT              reduce using rule 21 (exp -> TRUE .)
    GE              reduce using rule 21 (exp -> TRUE .)
    GT              reduce using rule 21 (exp -> TRUE .)
    ANDAND          reduce using rule 21 (exp -> TRUE .)
    OROR            reduce using rule 21 (exp -> TRUE .)
    SEMICOLON       reduce using rule 21 (exp -> TRUE .)
    LBRACE          reduce using rule 21 (exp -> TRUE .)
    RPAREN          reduce using rule 21 (exp -> TRUE .)
    COMMA           reduce using rule 21 (exp -> TRUE .)


state 5

    (3) element -> FUNCTION . IDENTIFIER LPAREN optparams RPAREN compoundstmt

    IDENTIFIER      shift and go to state 21


state 6

    (23) exp -> NOT . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 22

state 7

    (20) exp -> STRING .

    PLUS            reduce using rule 20 (exp -> STRING .)
    MINUS           reduce using rule 20 (exp -> STRING .)
    TIMES           reduce using rule 20 (exp -> STRING .)
    DIVIDE          reduce using rule 20 (exp -> STRING .)
    EQUALEQUAL      reduce using rule 20 (exp -> STRING .)
    LE              reduce using rule 20 (exp -> STRING .)
    LT              reduce using rule 20 (exp -> STRING .)
    GE              reduce using rule 20 (exp -> STRING .)
    GT              reduce using rule 20 (exp -> STRING .)
    ANDAND          reduce using rule 20 (exp -> STRING .)
    OROR            reduce using rule 20 (exp -> STRING .)
    SEMICOLON       reduce using rule 20 (exp -> STRING .)
    LBRACE          reduce using rule 20 (exp -> STRING .)
    RPAREN          reduce using rule 20 (exp -> STRING .)
    COMMA           reduce using rule 20 (exp -> STRING .)


state 8

    (15) stmt -> RETURN . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 23

state 9

    (1) js -> element . js
    (1) js -> . element js
    (2) js -> .
    (3) element -> . FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt
    (4) element -> . stmt SEMICOLON
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    $end            reduce using rule 2 (js -> .)
    FUNCTION        shift and go to state 5
    IF              shift and go to state 2
    IDENTIFIER      shift and go to state 3
    RETURN          shift and go to state 8
    VAR             shift and go to state 11
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    stmt                           shift and go to state 1
    element                        shift and go to state 9
    js                             shift and go to state 24
    exp                            shift and go to state 14

state 10

    (0) S' -> js .



state 11

    (16) stmt -> VAR . IDENTIFIER EQUAL exp

    IDENTIFIER      shift and go to state 25


state 12

    (19) exp -> NUMBER .

    PLUS            reduce using rule 19 (exp -> NUMBER .)
    MINUS           reduce using rule 19 (exp -> NUMBER .)
    TIMES           reduce using rule 19 (exp -> NUMBER .)
    DIVIDE          reduce using rule 19 (exp -> NUMBER .)
    EQUALEQUAL      reduce using rule 19 (exp -> NUMBER .)
    LE              reduce using rule 19 (exp -> NUMBER .)
    LT              reduce using rule 19 (exp -> NUMBER .)
    GE              reduce using rule 19 (exp -> NUMBER .)
    GT              reduce using rule 19 (exp -> NUMBER .)
    ANDAND          reduce using rule 19 (exp -> NUMBER .)
    OROR            reduce using rule 19 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 19 (exp -> NUMBER .)
    LBRACE          reduce using rule 19 (exp -> NUMBER .)
    RPAREN          reduce using rule 19 (exp -> NUMBER .)
    COMMA           reduce using rule 19 (exp -> NUMBER .)


state 13

    (22) exp -> FALSE .

    PLUS            reduce using rule 22 (exp -> FALSE .)
    MINUS           reduce using rule 22 (exp -> FALSE .)
    TIMES           reduce using rule 22 (exp -> FALSE .)
    DIVIDE          reduce using rule 22 (exp -> FALSE .)
    EQUALEQUAL      reduce using rule 22 (exp -> FALSE .)
    LE              reduce using rule 22 (exp -> FALSE .)
    LT              reduce using rule 22 (exp -> FALSE .)
    GE              reduce using rule 22 (exp -> FALSE .)
    GT              reduce using rule 22 (exp -> FALSE .)
    ANDAND          reduce using rule 22 (exp -> FALSE .)
    OROR            reduce using rule 22 (exp -> FALSE .)
    SEMICOLON       reduce using rule 22 (exp -> FALSE .)
    LBRACE          reduce using rule 22 (exp -> FALSE .)
    RPAREN          reduce using rule 22 (exp -> FALSE .)
    COMMA           reduce using rule 22 (exp -> FALSE .)


state 14

    (17) stmt -> exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 17 (stmt -> exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31


state 15

    (24) exp -> LPAREN . exp RPAREN
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 37

state 16

    (4) element -> stmt SEMICOLON .

    FUNCTION        reduce using rule 4 (element -> stmt SEMICOLON .)
    IF              reduce using rule 4 (element -> stmt SEMICOLON .)
    IDENTIFIER      reduce using rule 4 (element -> stmt SEMICOLON .)
    RETURN          reduce using rule 4 (element -> stmt SEMICOLON .)
    VAR             reduce using rule 4 (element -> stmt SEMICOLON .)
    NUMBER          reduce using rule 4 (element -> stmt SEMICOLON .)
    STRING          reduce using rule 4 (element -> stmt SEMICOLON .)
    TRUE            reduce using rule 4 (element -> stmt SEMICOLON .)
    FALSE           reduce using rule 4 (element -> stmt SEMICOLON .)
    NOT             reduce using rule 4 (element -> stmt SEMICOLON .)
    LPAREN          reduce using rule 4 (element -> stmt SEMICOLON .)
    $end            reduce using rule 4 (element -> stmt SEMICOLON .)


state 17

    (18) exp -> IDENTIFIER .
    (36) exp -> IDENTIFIER . LPAREN optargs RPAREN

    PLUS            reduce using rule 18 (exp -> IDENTIFIER .)
    MINUS           reduce using rule 18 (exp -> IDENTIFIER .)
    TIMES           reduce using rule 18 (exp -> IDENTIFIER .)
    DIVIDE          reduce using rule 18 (exp -> IDENTIFIER .)
    EQUALEQUAL      reduce using rule 18 (exp -> IDENTIFIER .)
    LE              reduce using rule 18 (exp -> IDENTIFIER .)
    LT              reduce using rule 18 (exp -> IDENTIFIER .)
    GE              reduce using rule 18 (exp -> IDENTIFIER .)
    GT              reduce using rule 18 (exp -> IDENTIFIER .)
    ANDAND          reduce using rule 18 (exp -> IDENTIFIER .)
    OROR            reduce using rule 18 (exp -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (exp -> IDENTIFIER .)
    LBRACE          reduce using rule 18 (exp -> IDENTIFIER .)
    RPAREN          reduce using rule 18 (exp -> IDENTIFIER .)
    COMMA           reduce using rule 18 (exp -> IDENTIFIER .)
    LPAREN          shift and go to state 20


state 18

    (12) stmt -> IF exp . compoundstmt
    (13) stmt -> IF exp . compoundstmt ELSE compoundstmt
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp
    (9) compoundstmt -> . LBRACE stmts RBRACE

    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31
    LBRACE          shift and go to state 38

    compoundstmt                   shift and go to state 39

state 19

    (14) stmt -> IDENTIFIER EQUAL . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 40

state 20

    (36) exp -> IDENTIFIER LPAREN . optargs RPAREN
    (37) optargs -> . args
    (38) optargs -> .
    (39) args -> . exp COMMA args
    (40) args -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RPAREN          reduce using rule 38 (optargs -> .)
    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    args                           shift and go to state 42
    optargs                        shift and go to state 41
    exp                            shift and go to state 43

state 21

    (3) element -> FUNCTION IDENTIFIER . LPAREN optparams RPAREN compoundstmt

    LPAREN          shift and go to state 44


state 22

    (23) exp -> NOT exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    PLUS            reduce using rule 23 (exp -> NOT exp .)
    MINUS           reduce using rule 23 (exp -> NOT exp .)
    TIMES           reduce using rule 23 (exp -> NOT exp .)
    DIVIDE          reduce using rule 23 (exp -> NOT exp .)
    EQUALEQUAL      reduce using rule 23 (exp -> NOT exp .)
    LE              reduce using rule 23 (exp -> NOT exp .)
    LT              reduce using rule 23 (exp -> NOT exp .)
    GE              reduce using rule 23 (exp -> NOT exp .)
    GT              reduce using rule 23 (exp -> NOT exp .)
    ANDAND          reduce using rule 23 (exp -> NOT exp .)
    OROR            reduce using rule 23 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 23 (exp -> NOT exp .)
    LBRACE          reduce using rule 23 (exp -> NOT exp .)
    RPAREN          reduce using rule 23 (exp -> NOT exp .)
    COMMA           reduce using rule 23 (exp -> NOT exp .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 23

    (15) stmt -> RETURN exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 15 (stmt -> RETURN exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31


state 24

    (1) js -> element js .

    $end            reduce using rule 1 (js -> element js .)


state 25

    (16) stmt -> VAR IDENTIFIER . EQUAL exp

    EQUAL           shift and go to state 45


state 26

    (31) exp -> exp LT . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 46

state 27

    (26) exp -> exp MINUS . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 47

state 28

    (25) exp -> exp PLUS . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 48

state 29

    (34) exp -> exp ANDAND . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 49

state 30

    (28) exp -> exp DIVIDE . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 50

state 31

    (35) exp -> exp OROR . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 51

state 32

    (29) exp -> exp EQUALEQUAL . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 52

state 33

    (33) exp -> exp GT . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 53

state 34

    (30) exp -> exp LE . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 54

state 35

    (32) exp -> exp GE . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 55

state 36

    (27) exp -> exp TIMES . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 56

state 37

    (24) exp -> LPAREN exp . RPAREN
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    RPAREN          shift and go to state 57
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31


state 38

    (9) compoundstmt -> LBRACE . stmts RBRACE
    (10) stmts -> . stmt SEMICOLON stmts
    (11) stmts -> .
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RBRACE          reduce using rule 11 (stmts -> .)
    IF              shift and go to state 2
    IDENTIFIER      shift and go to state 3
    RETURN          shift and go to state 8
    VAR             shift and go to state 11
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    stmt                           shift and go to state 58
    exp                            shift and go to state 14
    stmts                          shift and go to state 59

state 39

    (12) stmt -> IF exp compoundstmt .
    (13) stmt -> IF exp compoundstmt . ELSE compoundstmt

    SEMICOLON       reduce using rule 12 (stmt -> IF exp compoundstmt .)
    ELSE            shift and go to state 60


state 40

    (14) stmt -> IDENTIFIER EQUAL exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 14 (stmt -> IDENTIFIER EQUAL exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31


state 41

    (36) exp -> IDENTIFIER LPAREN optargs . RPAREN

    RPAREN          shift and go to state 61


state 42

    (37) optargs -> args .

    RPAREN          reduce using rule 37 (optargs -> args .)


state 43

    (39) args -> exp . COMMA args
    (40) args -> exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    COMMA           shift and go to state 62
    RPAREN          reduce using rule 40 (args -> exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31


state 44

    (3) element -> FUNCTION IDENTIFIER LPAREN . optparams RPAREN compoundstmt
    (5) optparams -> . params
    (6) optparams -> .
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    RPAREN          reduce using rule 6 (optparams -> .)
    IDENTIFIER      shift and go to state 63

    params                         shift and go to state 64
    optparams                      shift and go to state 65

state 45

    (16) stmt -> VAR IDENTIFIER EQUAL . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    exp                            shift and go to state 66

state 46

    (31) exp -> exp LT exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 31 (exp -> exp LT exp .)
    LE              reduce using rule 31 (exp -> exp LT exp .)
    LT              reduce using rule 31 (exp -> exp LT exp .)
    GE              reduce using rule 31 (exp -> exp LT exp .)
    GT              reduce using rule 31 (exp -> exp LT exp .)
    ANDAND          reduce using rule 31 (exp -> exp LT exp .)
    OROR            reduce using rule 31 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 31 (exp -> exp LT exp .)
    LBRACE          reduce using rule 31 (exp -> exp LT exp .)
    RPAREN          reduce using rule 31 (exp -> exp LT exp .)
    COMMA           reduce using rule 31 (exp -> exp LT exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 31 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 31 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 31 (exp -> exp LT exp .) ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 47

    (26) exp -> exp MINUS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    PLUS            reduce using rule 26 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 26 (exp -> exp MINUS exp .)
    EQUALEQUAL      reduce using rule 26 (exp -> exp MINUS exp .)
    LE              reduce using rule 26 (exp -> exp MINUS exp .)
    LT              reduce using rule 26 (exp -> exp MINUS exp .)
    GE              reduce using rule 26 (exp -> exp MINUS exp .)
    GT              reduce using rule 26 (exp -> exp MINUS exp .)
    ANDAND          reduce using rule 26 (exp -> exp MINUS exp .)
    OROR            reduce using rule 26 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 26 (exp -> exp MINUS exp .)
    LBRACE          reduce using rule 26 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 26 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 26 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30

  ! TIMES           [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 27 ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 48

    (25) exp -> exp PLUS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    PLUS            reduce using rule 25 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 25 (exp -> exp PLUS exp .)
    EQUALEQUAL      reduce using rule 25 (exp -> exp PLUS exp .)
    LE              reduce using rule 25 (exp -> exp PLUS exp .)
    LT              reduce using rule 25 (exp -> exp PLUS exp .)
    GE              reduce using rule 25 (exp -> exp PLUS exp .)
    GT              reduce using rule 25 (exp -> exp PLUS exp .)
    ANDAND          reduce using rule 25 (exp -> exp PLUS exp .)
    OROR            reduce using rule 25 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 25 (exp -> exp PLUS exp .)
    LBRACE          reduce using rule 25 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 25 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 25 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30

  ! TIMES           [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 27 ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 49

    (34) exp -> exp ANDAND exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    ANDAND          reduce using rule 34 (exp -> exp ANDAND exp .)
    OROR            reduce using rule 34 (exp -> exp ANDAND exp .)
    SEMICOLON       reduce using rule 34 (exp -> exp ANDAND exp .)
    LBRACE          reduce using rule 34 (exp -> exp ANDAND exp .)
    RPAREN          reduce using rule 34 (exp -> exp ANDAND exp .)
    COMMA           reduce using rule 34 (exp -> exp ANDAND exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33

  ! PLUS            [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! TIMES           [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! DIVIDE          [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! EQUALEQUAL      [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! LE              [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! LT              [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! GE              [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! GT              [ reduce using rule 34 (exp -> exp ANDAND exp .) ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 50

    (28) exp -> exp DIVIDE exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    PLUS            reduce using rule 28 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 28 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 28 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 28 (exp -> exp DIVIDE exp .)
    EQUALEQUAL      reduce using rule 28 (exp -> exp DIVIDE exp .)
    LE              reduce using rule 28 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 28 (exp -> exp DIVIDE exp .)
    GE              reduce using rule 28 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 28 (exp -> exp DIVIDE exp .)
    ANDAND          reduce using rule 28 (exp -> exp DIVIDE exp .)
    OROR            reduce using rule 28 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 28 (exp -> exp DIVIDE exp .)
    LBRACE          reduce using rule 28 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 28 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 28 (exp -> exp DIVIDE exp .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 51

    (35) exp -> exp OROR exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    OROR            reduce using rule 35 (exp -> exp OROR exp .)
    SEMICOLON       reduce using rule 35 (exp -> exp OROR exp .)
    LBRACE          reduce using rule 35 (exp -> exp OROR exp .)
    RPAREN          reduce using rule 35 (exp -> exp OROR exp .)
    COMMA           reduce using rule 35 (exp -> exp OROR exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29

  ! PLUS            [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! TIMES           [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! DIVIDE          [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! EQUALEQUAL      [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! LE              [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! LT              [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! GE              [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! GT              [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! ANDAND          [ reduce using rule 35 (exp -> exp OROR exp .) ]
  ! OROR            [ shift and go to state 31 ]


state 52

    (29) exp -> exp EQUALEQUAL exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    ANDAND          reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    OROR            reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    SEMICOLON       reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    LBRACE          reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    RPAREN          reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    COMMA           reduce using rule 29 (exp -> exp EQUALEQUAL exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33

  ! PLUS            [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! TIMES           [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! DIVIDE          [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! LE              [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! LT              [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! GE              [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! GT              [ reduce using rule 29 (exp -> exp EQUALEQUAL exp .) ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 53

    (33) exp -> exp GT exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 33 (exp -> exp GT exp .)
    LE              reduce using rule 33 (exp -> exp GT exp .)
    LT              reduce using rule 33 (exp -> exp GT exp .)
    GE              reduce using rule 33 (exp -> exp GT exp .)
    GT              reduce using rule 33 (exp -> exp GT exp .)
    ANDAND          reduce using rule 33 (exp -> exp GT exp .)
    OROR            reduce using rule 33 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 33 (exp -> exp GT exp .)
    LBRACE          reduce using rule 33 (exp -> exp GT exp .)
    RPAREN          reduce using rule 33 (exp -> exp GT exp .)
    COMMA           reduce using rule 33 (exp -> exp GT exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 33 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 33 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 33 (exp -> exp GT exp .) ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 54

    (30) exp -> exp LE exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 30 (exp -> exp LE exp .)
    LE              reduce using rule 30 (exp -> exp LE exp .)
    LT              reduce using rule 30 (exp -> exp LE exp .)
    GE              reduce using rule 30 (exp -> exp LE exp .)
    GT              reduce using rule 30 (exp -> exp LE exp .)
    ANDAND          reduce using rule 30 (exp -> exp LE exp .)
    OROR            reduce using rule 30 (exp -> exp LE exp .)
    SEMICOLON       reduce using rule 30 (exp -> exp LE exp .)
    LBRACE          reduce using rule 30 (exp -> exp LE exp .)
    RPAREN          reduce using rule 30 (exp -> exp LE exp .)
    COMMA           reduce using rule 30 (exp -> exp LE exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 30 (exp -> exp LE exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp LE exp .) ]
  ! TIMES           [ reduce using rule 30 (exp -> exp LE exp .) ]
  ! DIVIDE          [ reduce using rule 30 (exp -> exp LE exp .) ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 55

    (32) exp -> exp GE exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    EQUALEQUAL      reduce using rule 32 (exp -> exp GE exp .)
    LE              reduce using rule 32 (exp -> exp GE exp .)
    LT              reduce using rule 32 (exp -> exp GE exp .)
    GE              reduce using rule 32 (exp -> exp GE exp .)
    GT              reduce using rule 32 (exp -> exp GE exp .)
    ANDAND          reduce using rule 32 (exp -> exp GE exp .)
    OROR            reduce using rule 32 (exp -> exp GE exp .)
    SEMICOLON       reduce using rule 32 (exp -> exp GE exp .)
    LBRACE          reduce using rule 32 (exp -> exp GE exp .)
    RPAREN          reduce using rule 32 (exp -> exp GE exp .)
    COMMA           reduce using rule 32 (exp -> exp GE exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30

  ! PLUS            [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! TIMES           [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! DIVIDE          [ reduce using rule 32 (exp -> exp GE exp .) ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 56

    (27) exp -> exp TIMES exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    PLUS            reduce using rule 27 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 27 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 27 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 27 (exp -> exp TIMES exp .)
    EQUALEQUAL      reduce using rule 27 (exp -> exp TIMES exp .)
    LE              reduce using rule 27 (exp -> exp TIMES exp .)
    LT              reduce using rule 27 (exp -> exp TIMES exp .)
    GE              reduce using rule 27 (exp -> exp TIMES exp .)
    GT              reduce using rule 27 (exp -> exp TIMES exp .)
    ANDAND          reduce using rule 27 (exp -> exp TIMES exp .)
    OROR            reduce using rule 27 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 27 (exp -> exp TIMES exp .)
    LBRACE          reduce using rule 27 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 27 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 27 (exp -> exp TIMES exp .)

  ! PLUS            [ shift and go to state 28 ]
  ! MINUS           [ shift and go to state 27 ]
  ! TIMES           [ shift and go to state 36 ]
  ! DIVIDE          [ shift and go to state 30 ]
  ! EQUALEQUAL      [ shift and go to state 32 ]
  ! LE              [ shift and go to state 34 ]
  ! LT              [ shift and go to state 26 ]
  ! GE              [ shift and go to state 35 ]
  ! GT              [ shift and go to state 33 ]
  ! ANDAND          [ shift and go to state 29 ]
  ! OROR            [ shift and go to state 31 ]


state 57

    (24) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    EQUALEQUAL      reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    GE              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    ANDAND          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    OROR            reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 24 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 24 (exp -> LPAREN exp RPAREN .)


state 58

    (10) stmts -> stmt . SEMICOLON stmts

    SEMICOLON       shift and go to state 67


state 59

    (9) compoundstmt -> LBRACE stmts . RBRACE

    RBRACE          shift and go to state 68


state 60

    (13) stmt -> IF exp compoundstmt ELSE . compoundstmt
    (9) compoundstmt -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 38

    compoundstmt                   shift and go to state 69

state 61

    (36) exp -> IDENTIFIER LPAREN optargs RPAREN .

    PLUS            reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    MINUS           reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    TIMES           reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    DIVIDE          reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    EQUALEQUAL      reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LE              reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LT              reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GE              reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    GT              reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    ANDAND          reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    OROR            reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    SEMICOLON       reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    LBRACE          reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    RPAREN          reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)
    COMMA           reduce using rule 36 (exp -> IDENTIFIER LPAREN optargs RPAREN .)


state 62

    (39) args -> exp COMMA . args
    (39) args -> . exp COMMA args
    (40) args -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    IDENTIFIER      shift and go to state 17
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    args                           shift and go to state 70
    exp                            shift and go to state 43

state 63

    (7) params -> IDENTIFIER . COMMA params
    (8) params -> IDENTIFIER .

    COMMA           shift and go to state 71
    RPAREN          reduce using rule 8 (params -> IDENTIFIER .)


state 64

    (5) optparams -> params .

    RPAREN          reduce using rule 5 (optparams -> params .)


state 65

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams . RPAREN compoundstmt

    RPAREN          shift and go to state 72


state 66

    (16) stmt -> VAR IDENTIFIER EQUAL exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . TIMES exp
    (28) exp -> exp . DIVIDE exp
    (29) exp -> exp . EQUALEQUAL exp
    (30) exp -> exp . LE exp
    (31) exp -> exp . LT exp
    (32) exp -> exp . GE exp
    (33) exp -> exp . GT exp
    (34) exp -> exp . ANDAND exp
    (35) exp -> exp . OROR exp

    SEMICOLON       reduce using rule 16 (stmt -> VAR IDENTIFIER EQUAL exp .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 27
    TIMES           shift and go to state 36
    DIVIDE          shift and go to state 30
    EQUALEQUAL      shift and go to state 32
    LE              shift and go to state 34
    LT              shift and go to state 26
    GE              shift and go to state 35
    GT              shift and go to state 33
    ANDAND          shift and go to state 29
    OROR            shift and go to state 31


state 67

    (10) stmts -> stmt SEMICOLON . stmts
    (10) stmts -> . stmt SEMICOLON stmts
    (11) stmts -> .
    (12) stmt -> . IF exp compoundstmt
    (13) stmt -> . IF exp compoundstmt ELSE compoundstmt
    (14) stmt -> . IDENTIFIER EQUAL exp
    (15) stmt -> . RETURN exp
    (16) stmt -> . VAR IDENTIFIER EQUAL exp
    (17) stmt -> . exp
    (18) exp -> . IDENTIFIER
    (19) exp -> . NUMBER
    (20) exp -> . STRING
    (21) exp -> . TRUE
    (22) exp -> . FALSE
    (23) exp -> . NOT exp
    (24) exp -> . LPAREN exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp TIMES exp
    (28) exp -> . exp DIVIDE exp
    (29) exp -> . exp EQUALEQUAL exp
    (30) exp -> . exp LE exp
    (31) exp -> . exp LT exp
    (32) exp -> . exp GE exp
    (33) exp -> . exp GT exp
    (34) exp -> . exp ANDAND exp
    (35) exp -> . exp OROR exp
    (36) exp -> . IDENTIFIER LPAREN optargs RPAREN

    RBRACE          reduce using rule 11 (stmts -> .)
    IF              shift and go to state 2
    IDENTIFIER      shift and go to state 3
    RETURN          shift and go to state 8
    VAR             shift and go to state 11
    NUMBER          shift and go to state 12
    STRING          shift and go to state 7
    TRUE            shift and go to state 4
    FALSE           shift and go to state 13
    NOT             shift and go to state 6
    LPAREN          shift and go to state 15

    stmt                           shift and go to state 58
    exp                            shift and go to state 14
    stmts                          shift and go to state 73

state 68

    (9) compoundstmt -> LBRACE stmts RBRACE .

    SEMICOLON       reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    FUNCTION        reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    IF              reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    IDENTIFIER      reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    RETURN          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    VAR             reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    NUMBER          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    STRING          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    TRUE            reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    FALSE           reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    NOT             reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    LPAREN          reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    $end            reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)
    ELSE            reduce using rule 9 (compoundstmt -> LBRACE stmts RBRACE .)


state 69

    (13) stmt -> IF exp compoundstmt ELSE compoundstmt .

    SEMICOLON       reduce using rule 13 (stmt -> IF exp compoundstmt ELSE compoundstmt .)


state 70

    (39) args -> exp COMMA args .

    RPAREN          reduce using rule 39 (args -> exp COMMA args .)


state 71

    (7) params -> IDENTIFIER COMMA . params
    (7) params -> . IDENTIFIER COMMA params
    (8) params -> . IDENTIFIER

    IDENTIFIER      shift and go to state 63

    params                         shift and go to state 74

state 72

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN . compoundstmt
    (9) compoundstmt -> . LBRACE stmts RBRACE

    LBRACE          shift and go to state 38

    compoundstmt                   shift and go to state 75

state 73

    (10) stmts -> stmt SEMICOLON stmts .

    RBRACE          reduce using rule 10 (stmts -> stmt SEMICOLON stmts .)


state 74

    (7) params -> IDENTIFIER COMMA params .

    RPAREN          reduce using rule 7 (params -> IDENTIFIER COMMA params .)


state 75

    (3) element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .

    FUNCTION        reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IF              reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    IDENTIFIER      reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    RETURN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    VAR             reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NUMBER          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    STRING          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    TRUE            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    FALSE           reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    NOT             reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    LPAREN          reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)
    $end            reduce using rule 3 (element -> FUNCTION IDENTIFIER LPAREN optparams RPAREN compoundstmt .)

